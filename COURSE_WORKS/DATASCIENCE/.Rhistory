perform_clustering <- function(data) {
# K-means clustering
kmeans_clusters <- kmeans(data, centers = 3)  # Assuming 3 clusters
kmeans_labels <- kmeans_clusters$cluster
# DBSCAN clustering
dbscan_clusters <- dbscan(data, eps = 0.5, minPts = 5)  # Example parameters, adjust as needed
dbscan_labels <- dbscan_clusters$cluster
# Gaussian Mixture Models (GMM)
gmm_clusters <- Mclust(data)  # Assuming default parameters
gmm_labels <- gmm_clusters$classification
# Return cluster labels from all algorithms
return(list(kmeans = kmeans_labels, dbscan = dbscan_labels, gmm = gmm_labels))
}
# Call the function to perform clustering
cluster_results <- perform_clustering(fish_data)
library(dbscan)
perform_clustering <- function(data) {
# K-means clustering
kmeans_clusters <- kmeans(data, centers = 3)  # Assuming 3 clusters
kmeans_labels <- kmeans_clusters$cluster
# DBSCAN clustering
dbscan_clusters <- dbscan(data, eps = 0.5, minPts = 5)  # Example parameters, adjust as needed
dbscan_labels <- dbscan_clusters$cluster
# Gaussian Mixture Models (GMM)
gmm_clusters <- Mclust(data)  # Assuming default parameters
gmm_labels <- gmm_clusters$classification
# Return cluster labels from all algorithms
return(list(kmeans = kmeans_labels, dbscan = dbscan_labels, gmm = gmm_labels))
}
# Call the function to perform clustering
cluster_results <- perform_clustering(fish_data)
install.packages("mclust")
library(mclust)
perform_clustering <- function(data) {
# K-means clustering
kmeans_clusters <- kmeans(data, centers = 3)  # Assuming 3 clusters
kmeans_labels <- kmeans_clusters$cluster
# DBSCAN clustering
dbscan_clusters <- dbscan(data, eps = 0.5, minPts = 5)  # Example parameters, adjust as needed
dbscan_labels <- dbscan_clusters$cluster
# Gaussian Mixture Models (GMM)
gmm_clusters <- Mclust(data)  # Assuming default parameters
gmm_labels <- gmm_clusters$classification
# Return cluster labels from all algorithms
return(list(kmeans = kmeans_labels, dbscan = dbscan_labels, gmm = gmm_labels))
}
# Call the function to perform clustering
cluster_results <- perform_clustering(fish_data)
# Access the cluster labels
kmeans_labels <- cluster_results$kmeans
dbscan_labels <- cluster_results$dbscan
gmm_labels <- cluster_results$gmm
# Print the first few cluster labels for each algorithm
cat("K-means clustering labels:\n")
print(head(kmeans_labels))
cat("\nDBSCAN clustering labels:\n")
print(head(dbscan_labels))
cat("\nGaussian Mixture Models (GMM) labels:\n")
print(head(gmm_labels))
perform_clustering <- function(data) {
# K-means clustering
kmeans_clusters <- kmeans(data, centers = 3)  # Assuming 3 clusters
kmeans_labels <- kmeans_clusters$cluster
# DBSCAN clustering
dbscan_clusters <- dbscan(data, eps = 0.5, minPts = 5)  # Example parameters, adjust as needed
dbscan_labels <- dbscan_clusters$cluster
# Gaussian Mixture Models (GMM)
gmm_clusters <- Mclust(data)  # Assuming default parameters
gmm_labels <- gmm_clusters$classification
# Compare with original species labels
comparison_df <- data.frame(
Original_Species = data$Species,
KMeans_Cluster = kmeans_labels,
DBSCAN_Cluster = dbscan_labels,
GMM_Cluster = gmm_labels
)
# Return cluster labels and comparison dataframe
return(list(
KMeans = kmeans_labels,
DBSCAN = dbscan_labels,
GMM = gmm_labels,
Comparison = comparison_df
))
}
# Call the function to perform clustering
cluster_results <- perform_clustering(fish_data)
perform_clustering <- function(data_cluster) {
# K-means clustering
kmeans_clusters <- kmeans(data_cluster, centers = 3)  # Assuming 3 clusters
kmeans_labels <- kmeans_clusters$cluster
# DBSCAN clustering
dbscan_clusters <- dbscan(data_cluster, eps = 0.5, minPts = 5)  # Example parameters, adjust as needed
dbscan_labels <- dbscan_clusters$cluster
# Gaussian Mixture Models (GMM)
gmm_clusters <- Mclust(data_cluster)  # Assuming default parameters
gmm_labels <- gmm_clusters$classification
# Compare with original species labels
comparison_df <- data.frame(
Original_Species = data$Species,
KMeans_Cluster = kmeans_labels,
DBSCAN_Cluster = dbscan_labels,
GMM_Cluster = gmm_labels
)
# Return cluster labels and comparison dataframe
return(list(
KMeans = kmeans_labels,
DBSCAN = dbscan_labels,
GMM = gmm_labels,
Comparison = comparison_df
))
}
# Call the function to perform clustering
cluster_results <- perform_clustering(fish_data)
# Access the cluster labels
kmeans_labels <- cluster_results$kmeans
dbscan_labels <- cluster_results$dbscan
gmm_labels <- cluster_results$gmm
# Print the first few cluster labels for each algorithm
cat("K-means clustering labels:\n")
print(head(kmeans_labels))
cat("\nDBSCAN clustering labels:\n")
print(head(dbscan_labels))
cat("\nGaussian Mixture Models (GMM) labels:\n")
print(head(gmm_labels))
perform_clustering <- function(data, species_labels) {
# K-means clustering
kmeans_clusters <- kmeans(data, centers = 3)  # Assuming 3 clusters
kmeans_labels <- kmeans_clusters$cluster
# DBSCAN clustering
dbscan_clusters <- dbscan(data, eps = 0.5, minPts = 5)  # Example parameters, adjust as needed
dbscan_labels <- dbscan_clusters$cluster
# Gaussian Mixture Models (GMM)
gmm_clusters <- Mclust(data)  # Assuming default parameters
gmm_labels <- gmm_clusters$classification
# Compare with original species labels
comparison_df <- data.frame(
Original_Species = species_labels,
KMeans_Cluster = kmeans_labels,
DBSCAN_Cluster = dbscan_labels,
GMM_Cluster = gmm_labels
)
# Return cluster labels and comparison dataframe
return(list(
KMeans = kmeans_labels,
DBSCAN = dbscan_labels,
GMM = gmm_labels,
Comparison = comparison_df
))
}
# Call the function to perform clustering
cluster_results <- perform_clustering(fish_data, data$Species)
# Access the cluster labels
kmeans_labels <- cluster_results$KMeans
dbscan_labels <- cluster_results$DBSCAN
gmm_labels <- cluster_results$GMM
# Access the comparison dataframe
comparison_df <- cluster_results$Comparison
# Print the first few rows of the comparison dataframe
print(head(comparison_df))
# Print the first few rows of the comparison dataframe
print(comparison_df)
# Calculate frequency of cluster labels for each clustering algorithm
kmeans_freq <- table(comparison_df$KMeans_Cluster)
dbscan_freq <- table(comparison_df$DBSCAN_Cluster)
gmm_freq <- table(comparison_df$GMM_Cluster)
# Find the cluster with the maximum frequency for each algorithm
max_kmeans_cluster <- names(which.max(kmeans_freq))
max_dbscan_cluster <- names(which.max(dbscan_freq))
max_gmm_cluster <- names(which.max(gmm_freq))
# Print the clusters with the maximum frequency
cat("K-means: Cluster with the maximum frequency =", max_kmeans_cluster, "\n")
cat("DBSCAN: Cluster with the maximum frequency =", max_dbscan_cluster, "\n")
cat("GMM: Cluster with the maximum frequency =", max_gmm_cluster, "\n")
# Group by species and calculate the mode cluster for each species
species_mode_cluster <- comparison_df %>%
group_by(Original_Species) %>%
summarize(
Mode_Cluster_KMeans = names(which.max(table(KMeans_Cluster))),
Mode_Cluster_DBSCAN = names(which.max(table(DBSCAN_Cluster))),
Mode_Cluster_GMM = names(which.max(table(GMM_Cluster)))
)
# Print the result
print(species_mode_cluster)
species_cluster_freq <- list()
# Loop through each clustering algorithm
for (algo in c("KMeans", "DBSCAN", "GMM")) {
# Get the mode cluster for each species
mode_clusters <- species_mode_cluster[[paste0("Mode_Cluster_", algo)]]
# Initialize an empty dataframe to store the results for the current algorithm
freq_df <- data.frame()
# Loop through each species
for (species in unique(species_mode_cluster$Original_Species)) {
# Filter comparison_df to include only rows where the mode cluster matches the cluster label
filtered_df <- comparison_df[comparison_df$Original_Species == species &
comparison_df[[paste0(algo, "_Cluster")]] == mode_clusters[species], ]
# Calculate the frequency of each species within the mode cluster
species_freq <- table(filtered_df$Original_Species)
# Append the results to freq_df
freq_df <- rbind(freq_df, data.frame(Species = names(species_freq), Frequency = as.numeric(species_freq)))
}
# Store the results for the current algorithm in the species_cluster_freq list
species_cluster_freq[[algo]] <- freq_df
}
# Print the results
for (algo in c("KMeans", "DBSCAN", "GMM")) {
cat("\nClustering Algorithm:", algo, "\n")
print(species_cluster_freq[[algo]])
}
kmeans_cluster_counts <- table(comparison_df$Original_Species, comparison_df$KMeans_Cluster)
# Print the contingency table for KMeans clustering
print("KMeans Clustering:")
print(kmeans_cluster_counts)
# Create a contingency table of Original_Species vs. DBSCAN_Cluster
dbscan_cluster_counts <- table(comparison_df$Original_Species, comparison_df$DBSCAN_Cluster)
# Print the contingency table for DBSCAN clustering
print("DBSCAN Clustering:")
print(dbscan_cluster_counts)
# Create a contingency table of Original_Species vs. GMM_Cluster
gmm_cluster_counts <- table(comparison_df$Original_Species, comparison_df$GMM_Cluster)
# Print the contingency table for GMM clustering
print("GMM Clustering:")
print(gmm_cluster_counts)
# Print the first few rows of the comparison dataframe
print(comparison_df)
# Print the result
print(species_mode_cluster)
print(kmeans_cluster_counts)
# Plot tanglegram
tanglegram(dend1, dend2, main = "Tanglegram of Complete and Ward's Clustering")
# Visualize clustering results
fviz_cluster(list(data = fish_data_scale, cluster = cutree(hc1, k = 4)), repel = TRUE)
fviz_cluster(list(data = fish_data_scale, cluster = cutree(hc2, k = 4)), repel = TRUE)
# Print cluster assignments
table(cutree(hc1, k = 4))
table(cutree(hc2, k = 4))
data <- read.csv("fish.csv")
data.labels <- data$Species
table(data.labels)
sum(is.na(data))
ggplot(data, aes(Height, Weight, color = Species, size = Species)) +
geom_point(alpha = 0.5) + theme_minimal()
variables <- c("Weight", "Length1", "Length2", "Length3", "Height", "Width")
titles <- c("Weight of fish", "Length1", "Length2", "Length3", "Height", "Width")
plots <- list()
for (i in 1:length(variables)) {
plots[[i]] <- ggplot(data, aes(Species, !!sym(variables[i]), fill = Species)) +
geom_boxplot(show.legend = F) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(colour = "blue"),
axis.title.y = element_text(colour = "blue")
) +
labs(title = titles[i], y = "Value") +
scale_fill_manual(values = c("red", "green", "yellow", "blue", "purple", "orange", "pink"))
}
plot_grid(plotlist = plots)
for (col in names(data)) {
if (is.numeric(data[[col]])) {
correlation <- cor(as.numeric(as.factor(data$Species)), data[[col]])
print(paste("Correlation between Species and", col, ":", correlation))
}
}
variables <- c("Weight", "Length1", "Length2", "Length3", "Height", "Width")
titles <- c("Weight of fish", "Length1", "Length2", "Length3", "Height", "Width")
plots <- list()
for (i in 1:length(variables)) {
plots[[i]] <- ggplot(data, aes(Species, !!sym(variables[i]), fill = Species)) +
geom_boxplot(show.legend = F) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(colour = "blue"),
axis.title.y = element_text(colour = "blue")
) +
labs(title = titles[i], y = "Value") +
scale_fill_manual(values = c("red", "green", "yellow", "blue", "purple", "orange", "pink"))
}
plot_grid(plotlist = plots)
for (col in names(data)) {
if (is.numeric(data[[col]])) {
correlation <- cor(as.numeric(as.factor(data$Species)), data[[col]])
print(paste("Correlation between Species and", col, ":", correlation))
}
}
fish_data <- data[2:7]
summary(fish_data)
fish_data_scale <- scale(fish_data )
fish_data_scale
fish_data <- dist(fish_data_scale)
fviz_nbclust(fish_data_scale, kmeans, method = "wss")+
labs(subtitle="Elbow Method")
km.out <- kmeans(fish_data_scale, centers=4,nstart=100)
print(km.out)
km.clusters<-km.out$cluster
rownames(fish_data_scale)<-paste(data$Species, 1:dim(iris)[1], sep = "_")
fviz_cluster(list(data=fish_data_scale, cluster = km.clusters))
table(km.clusters, data$Species)
table(data$Species, km.out$cluster)
perform_clustering <- function(data, species_labels) {
kmeans_clusters <- kmeans(data, centers = 3)
kmeans_labels <- kmeans_clusters$cluster
dbscan_clusters <- dbscan(data, eps = 0.5, minPts = 5)
dbscan_labels <- dbscan_clusters$cluster
gmm_clusters <- Mclust(data)
gmm_labels <- gmm_clusters$classification
comparison_df <- data.frame(
Original_Species = species_labels,
KMeans_Cluster = kmeans_labels,
DBSCAN_Cluster = dbscan_labels,
GMM_Cluster = gmm_labels
)
return(list(
KMeans = kmeans_labels,
DBSCAN = dbscan_labels,
GMM = gmm_labels,
Comparison = comparison_df
))
}
cluster_results <- perform_clustering(fish_data, data$Species)
kmeans_labels <- cluster_results$KMeans
dbscan_labels <- cluster_results$DBSCAN
gmm_labels <- cluster_results$GMM
comparison_df <- cluster_results$Comparison
print(comparison_df)
species_mode_cluster <- comparison_df %>%
group_by(Original_Species) %>%
summarize(
Mode_Cluster_KMeans = names(which.max(table(KMeans_Cluster))),
Mode_Cluster_DBSCAN = names(which.max(table(DBSCAN_Cluster))),
Mode_Cluster_GMM = names(which.max(table(GMM_Cluster)))
)
print(species_mode_cluster)
species_mode_cluster <- comparison_df %>%
group_by(Original_Species) %>%
summarize(
Mode_Cluster_KMeans = names(which.max(table(KMeans_Cluster))),
Mode_Cluster_DBSCAN = names(which.max(table(DBSCAN_Cluster))),
Mode_Cluster_GMM = names(which.max(table(GMM_Cluster)))
)
print(species_mode_cluster)
kmeans_cluster_counts <- table(comparison_df$Original_Species, comparison_df$KMeans_Cluster)
print("KMeans Clustering:")
print(kmeans_cluster_counts)
dbscan_cluster_counts <- table(comparison_df$Original_Species, comparison_df$DBSCAN_Cluster)
print("DBSCAN Clustering:")
print(dbscan_cluster_counts)
gmm_cluster_counts <- table(comparison_df$Original_Species, comparison_df$GMM_Cluster)
print("GMM Clustering:")
print(gmm_cluster_counts)
table(km.clusters, data$Species)
table(data$Species, km.out$cluster)
res.dist <- dist(fish_data_scale, method = "euclidean")
ilhouette_score <- function(k) {
km.out <- kmeans(fish_data_scale, centers = k, nstart = 100)
silhouette <- silhouette(km.out$cluster, dist(fish_data_scale))
return(mean(silhouette[, 2]))
}
k_range <- 2:10
silhouette_scores <- sapply(k_range, silhouette_score)
res.dist <- dist(fish_data_scale, method = "euclidean")
Silhouette_score <- function(k) {
km.out <- kmeans(fish_data_scale, centers = k, nstart = 100)
silhouette <- silhouette(km.out$cluster, dist(fish_data_scale))
return(mean(silhouette[, 2]))
}
k_range <- 2:10
silhouette_scores <- sapply(k_range, silhouette_score)
silhouette_score <- function(k) {
km.out <- kmeans(fish_data_scale, centers = k, nstart = 100)
silhouette <- silhouette(km.out$cluster, dist(fish_data_scale))
return(mean(silhouette[, 2]))
}
k_range <- 2:10
silhouette_scores <- sapply(k_range, silhouette_score)
chosen_k <- k_range[which.max(silhouette_scores)]
cat("Chosen k based on silhouette analysis:", chosen_k, "\n")
cat("Average silhouette score for k=", chosen_k, ":", silhouette_scores[which.max(silhouette_scores)], "\n")
km.out <- kmeans(fish_data_scale, centers=4,nstart=100)
print(km.out)
km.clusters<-km.out$cluster
rownames(fish_data_scale)<-paste(data$Species, 1:dim(data)[1], sep = "_")
fviz_cluster(list(data=fish_data_scale, cluster = km.clusters))
table(km.clusters, data$Species)
table(data$Species, km.out$cluster)
km.out <- kmeans(fish_data_scale, centers=9,nstart=100)
print(km.out)
km.clusters<-km.out$cluster
rownames(fish_data_scale)<-paste(data$Species, 1:dim(data)[1], sep = "_")
fviz_cluster(list(data=fish_data_scale, cluster = km.clusters))
table(km.clusters, data$Species)
table(data$Species, km.out$cluster)
res.dist <- dist(fish_data_scale, method = "euclidean")
silhouette_score <- function(k) {
km.out <- kmeans(fish_data_scale, centers = k, nstart = 100)
silhouette <- silhouette(km.out$cluster, dist(fish_data_scale))
return(mean(silhouette[, 2]))
}
k_range <- 2:10
silhouette_scores <- sapply(k_range, silhouette_score)
chosen_k <- k_range[which.max(silhouette_scores)]
cat("Chosen k based on silhouette analysis:", chosen_k, "\n")
cat("Average silhouette score for k=", chosen_k, ":", silhouette_scores[which.max(silhouette_scores)], "\n")
km.out <- kmeans(fish_data_scale, centers=4,nstart=100)
print(km.out)
km.clusters<-km.out$cluster
rownames(fish_data_scale)<-paste(data$Species, 1:dim(data)[1], sep = "_")
fviz_cluster(list(data=fish_data_scale, cluster = km.clusters))
table(km.clusters, data$Species)
table(data$Species, km.out$cluster)
table(data.labels)
hc <- hclust(dist(data), method = "ward.D2")
hc_labels <- cutree(hc, k = 4)
combined_labels <- cbind(km.out$cluster, hc_labels)
final_labels <- apply(combined_labels, 1, function(row) {
table(row)[which.max(table(row))]
})
# Visualize ensemble clustering
fviz_cluster(list(data = fish_data_scale, cluster = final_labels), repel = TRUE)
comparison_df <- data.frame(
Original_Species = data$Species,
Cluster_Labels = final_labels
)
contingency_table <- table(comparison_df$Original_Species, comparison_df$Cluster_Labels)
print(contingency_table)
fviz_cluster(list(data=fish_data_scale, cluster = km.clusters))
km.out <- kmeans(fish_data_scale, centers=9,nstart=100)
print(km.out)
km.clusters<-km.out$cluster
rownames(fish_data_scale)<-paste(data$Species, 1:dim(data)[1], sep = "_")
fviz_cluster(list(data=fish_data_scale, cluster = km.clusters))
table(km.clusters, data$Species)
table(data$Species, km.out$cluster)
hc3 <- agnes(fish_data_scale, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of Fish Species")
clusters <- cutree(hc3, k = 4)
fviz_cluster(list(data = fish_data_scale, cluster = clusters), repel = TRUE)
table(clusters)
table(data$Species,clusters)
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of Fish Species")
table(data.labels)
hc1 <- hclust(res.dist, method = "complete")
hc2 <- hclust(res.dist, method = "ward.D2")
# Create two dendrograms
dend1 <- as.dendrogram(hc1)
dend2 <- as.dendrogram(hc2)
# Plot tanglegram
tanglegram(dend1, dend2, main = "Tanglegram of Complete and Ward's Clustering")
# Visualize clustering results
fviz_cluster(list(data = fish_data_scale, cluster = cutree(hc1, k = 4)), repel = TRUE)
fviz_cluster(list(data = fish_data_scale, cluster = cutree(hc2, k = 4)), repel = TRUE)
# Print cluster assignments
table(cutree(hc1, k = 4))
table(cutree(hc2, k = 4))
table(data$species,cutree(hc1, k = 4))
cluster_labels <- cutree(hc1, k = 4)
cluster_df <- data.frame(Species = data$Species, Cluster = cluster_labels)
print(cluster_df)
table(data$Species,cluster_df)
cluster_counts <- table(cluster_df)
print(cluster_counts)
# Plot tanglegram
tanglegram(dend1, dend2, main = "Tanglegram of Complete and Ward's Clustering")
# Print cluster assignments
cluster_labels <- cutree(hc2, k = 4)
cluster_labels <- cutree(hc2, k = 4)
cluster_df <- data.frame(Species = data$Species, Cluster = cluster_labels)
cluster_counts <- table(cluster_df)
print(cluster_counts)
table(data.labels)
# Visualize clustering results
fviz_cluster(list(data = fish_data_scale, cluster = cutree(hc1, k = 4)), repel = TRUE)
fviz_cluster(list(data = fish_data_scale, cluster = cutree(hc2, k = 4)), repel = TRUE)
table(data.labels)
# Data for GMM, DBSCAN, and KNN cluster outputs
gmm_data <- matrix(c(
13, 14, 7, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 4, 5, 2, 0, 0,
1, 6, 12, 3, 7, 19, 8, 0, 0,
0, 0, 0, 0, 0, 0, 0, 13, 4,
1, 0, 0, 1, 3, 13, 2, 0, 0,
0, 0, 0, 14, 0, 0, 0, 0, 0,
1, 1, 1, 0, 0, 0, 3, 0, 0
), ncol = 9, byrow = TRUE)
dbscan_data <- matrix(c(
0, 29, 6, 0, 0, 0, 0, 0,
1, 2, 0, 8, 0, 0, 0, 0,
4, 0, 0, 36, 5, 1, 6, 4,
17, 0, 0, 0, 0, 0, 0, 0,
1, 0, 0, 19, 0, 0, 0, 0,
0, 0, 0, 2, 0, 12, 0, 0,
2, 0, 0, 3, 1, 0, 0, 0
), ncol = 8, byrow = TRUE)
knn_data <- matrix(c(
0, 31, 4,
2, 0, 9,
5, 19, 32,
0, 14, 3,
1, 1, 18,
14, 0, 0
), ncol = 3, byrow = TRUE)
# Species labels
labels <- c("Bream", "Parkki", "Perch", "Pike", "Roach", "Smelt", "Whitefish")
# Calculate the mode cluster for each species
gmm_mode_clusters <- apply(gmm_data, 1, function(x) names(which.max(x)))
dbscan_mode_clusters <- apply(dbscan_data, 1, function(x) names(which.max(x)))
knn_mode_clusters <- apply(knn_data, 1, function(x) names(which.max(x)))
# Create a data frame
result_df <- data.frame(Species = labels,
GMM_Best_Cluster = gmm_mode_clusters,
DBSCAN_Best_Cluster = dbscan_mode_clusters,
KNN_Best_Cluster = knn_mode_clusters)
